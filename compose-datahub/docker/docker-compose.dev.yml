# Default overrides for running local development.

# Images here are made as "development" images by following the general pattern of defining a multistage build with
# separate prod/dev steps; using APP_ENV to specify which to use. The dev steps should avoid building and instead assume
# that binaries and scripts will be mounted to the image, as also set up by this file. Also see see this excellent
# thread https://github.com/docker/cli/issues/1134.

# To make a JVM app debuggable via IntelliJ, go to its env file and add JVM debug flags, and then add the JVM debug
# port to this file.
---
version: '3.8'
services:
  # Pre-creates the search indices using local mapping/settings.json
  elasticsearch-setup:
    image: linkedin/datahub-elasticsearch-setup:debug
    build:
      context: elasticsearch-setup
      dockerfile: elasticsearch-setup/Dockerfile
      args:
        APP_ENV: dev
    volumes:
      - ./elasticsearch-setup/create-indices.sh:/create-indices.sh
      - ../metadata-service/restli-impl/src/main/resources/index/:/index

  kafka-setup:
    image: linkedin/datahub-kafka-setup:debug
    build:
      context: kafka-setup
      dockerfile: kafka-setup/Dockerfile
      args:
        APP_ENV: dev

  datahub-gms:
    image: linkedin/datahub-gms:debug
    build:
      context: datahub-gms
      dockerfile: datahub-gms/Dockerfile
      args:
        APP_ENV: dev
    volumes:
      - ./datahub-gms/start.sh:/datahub/datahub-gms/scripts/start.sh
      - ./monitoring/client-prometheus-config.yaml:/datahub/datahub-gms/scripts/prometheus-config.yaml
      - ../metadata-models/src/main/resources/:/datahub/datahub-gms/resources
      - ../metadata-service/war/build/libs/:/datahub/datahub-gms/bin

  datahub-frontend-react:
    image: linkedin/datahub-frontend-react:debug
    build:
      context: datahub-frontend
      dockerfile: datahub-frontend/Dockerfile
      args:
        APP_ENV: dev
    volumes:
      - ../datahub-frontend/build/stage/datahub-frontend:/datahub-frontend
